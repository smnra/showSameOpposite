# -*- coding: utf-8 -*-
"""
/***************************************************************************
 showSameOpposite
                                 A QGIS plugin
 showSameOpposite
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-04-17
        git sha              : $Format:%H$
        copyright            : (C) 2025 by showSameOpposite
        email                : showSameOpposite
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
################################# 远程调试 #################################################
# import sys,os
# debuger_path = os.path.join(os.path.dirname(__file__),'pydevd-pycharm.egg')
# print(debuger_path)
# sys.path.append(debuger_path)
#
# import pydevd_pycharm
# pydevd_pycharm.settrace('localhost', port=53001, stdoutToServer=True, stderrToServer=True)
# ###################################################################################################
#
#





from PyQt5.QtWidgets import QMessageBox
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction



from .showSameOpposite_dialog import showSameOppositeDialog,searchDialog
import os.path




# Initialize Qt resources from file resources.py      # 导入图标
from .resources import *
# Import the code for the dialog





from qgis.utils import iface
from qgis.gui import QgsMapTool, QgsMapMouseEvent
from qgis.core import QgsProject, QgsGeometry, QgsCoordinateTransform
from qgis.core import QgsRectangle, QgsFeatureRequest

from PyQt5.QtWidgets import QListWidget, QDialog, QVBoxLayout, QListWidgetItem








from .config import select_distance_features,create_temp_layer,deduplicate_by_key
from .config import distance_dict,run_timer



# 导入图层触发器  主要用于添加索引对象 和移除临时图层
from .config import LayerMonitor




class showSameOpposite:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory

        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'showSameOpposite_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        self.monitor = LayerMonitor()   # 创建图层触发监听实例




    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""
        
        self.action = QAction(QCoreApplication.translate('showSameOpposite', 'showSameOpposite'), self.iface.mainWindow())
        self.action_search = QAction(QCoreApplication.translate('showSameOpposite', 'Search'), self.iface.mainWindow())
        self.action_config = QAction(QCoreApplication.translate('showSameOpposite', 'Config'), self.iface.mainWindow())
        
        self.iface.registerMainWindowAction(self.action, 'Shift+S')
        self.iface.registerMainWindowAction(self.action_search, 'Shift+F')
        self.iface.registerMainWindowAction(self.action_config, 'Shift+C')
        
        self.action.setIcon(QIcon(':/plugins/showSameOpposite/icons/select.png'))
        self.action_search.setIcon(QIcon(':/plugins/showSameOpposite/icons/search.png'))
        self.action_config.setIcon(QIcon(':/plugins/showSameOpposite/icons/config.png'))
        
        self.action.triggered.connect(self.run)
        self.action_search.triggered.connect(self.run_search)
        self.action_config.triggered.connect(self.run_config)
        
        self.action.setEnabled(True)
        self.action_search.setEnabled(True)
        self.action_config.setEnabled(False)

        self.action.setWhatsThis("Select a cell.")
        self.action_search.setWhatsThis("Search a cell.")
        self.action_config.setWhatsThis("Config sector draw")

        self.iface.addToolBarIcon(self.action)
        self.iface.addToolBarIcon(self.action_search)
        self.iface.addToolBarIcon(self.action_config)

        self.iface.addPluginToMenu(QCoreApplication.translate('showSameOpposite', 'showSameOpposite'),self.action)
        self.iface.addPluginToMenu(QCoreApplication.translate('showSameOpposite', 'showSameOpposite'),self.action_search)
        self.iface.addPluginToMenu(QCoreApplication.translate('showSameOpposite', 'showSameOpposite'),self.action_config)

        self.first_start = True


    def unload(self):
        try:
            """Removes the plugin menu item and icon from QGIS GUI."""
            self.iface.unregisterMainWindowAction(self.action)
            self.iface.unregisterMainWindowAction(self.action_search)
            self.iface.unregisterMainWindowAction(self.action_config)

            self.iface.removeToolBarIcon(self.action)
            self.iface.removeToolBarIcon(self.action_search)
            self.iface.removeToolBarIcon(self.action_config)

            self.iface.removePluginMenu(QCoreApplication.translate('showSameOpposite', 'showSameOpposite'), self.action)
            self.iface.removePluginMenu(QCoreApplication.translate('showSameOpposite', 'showSameOpposite'), self.action_search)
            self.iface.removePluginMenu(QCoreApplication.translate('showSameOpposite', 'showSameOpposite'), self.action_config)

            # 清理信号连接
            # QgsProject.instance().layersAdded.disconnect(self.monitor.on_layers_added)
            # QgsProject.instance().layersRemoved.disconnect(self.monitor.on_layers_removed)
        except Exception as e:
            print(e)

    def run(self):
        """Run method that performs all the real work"""
        # 激活工具
        selectTool = MultiSelectMapTool(iface.mapCanvas())
        iface.mapCanvas().setMapTool(selectTool)
                
        
        
        
    def run_search(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started

        # pydevd_pycharm.settrace('localhost', port=53001, stdoutToServer=True, stderrToServer=True)
        self.search_dlg = searchDialog()

        # show the dialog
        self.search_dlg.show()


    def run_config(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started

        # pydevd_pycharm.settrace('localhost', port=53001, stdoutToServer=True, stderrToServer=True)
        self.dlg = showSameOppositeDialog()

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass










class MultiSelectMapTool(QgsMapTool):
    def __init__(self, canvas):
        super().__init__(canvas)
        self.canvas = canvas
        self.source_fid = ''
        self.source_layer = ''



    def canvasReleaseEvent(self, event: QgsMapMouseEvent):
        # pydevd_pycharm.settrace('localhost', port=53001, stdoutToServer=True, stderrToServer=True)        # 调试代码
        # 获取点击点的坐标（地图坐标）
        point = self.toMapCoordinates(event.pos())
        # 获取所有可见的矢量图层
        layer = iface.activeLayer()
        found_feature_ids = []

        try:
            if layer.type() == layer.VectorLayer:
                # 将点坐标转换为图层坐标系
                transform = QgsCoordinateTransform(self.canvas.mapSettings().destinationCrs(), layer.crs(), QgsProject.instance())
                point_layer = transform.transform(point)
                # 创建请求，查找在该点处的要素
                tolerance = self.canvas.mapUnitsPerPixel() * 5  # 5像素的容差
                rect = QgsGeometry.fromRect(QgsRectangle(point_layer.x() - tolerance, point_layer.y() - tolerance,
                                                         point_layer.x() + tolerance, point_layer.y() + tolerance))
                request = QgsFeatureRequest().setFilterRect(rect.boundingBox())
                for feature in layer.getFeatures(request):
                    geom = feature.geometry()
                    if geom.intersects(rect):
                        found_feature_ids.append(feature)

                # found_features 列表去重
                found_feature_ids = deduplicate_by_key(found_feature_ids,'sc_eci')
                # 显示选择对话框
                self.show_found_features(layer,found_feature_ids)

        except Exception as e:
            print(e)
        finally:
            print("########################################################################")





    def show_found_features(self,layer,found_feature_ids):
        # 显示选择对话框
        if len(found_feature_ids) > 0:
            dlg = QDialog()
            dlg.setWindowTitle("选择要素")
            layout = QVBoxLayout()
            list_widget = QListWidget()
            list_widget.setFixedSize(400, 300)  # 宽度 400px，高度 300px
            for feature_id in found_feature_ids:
                feature = layer.getFeature(feature_id)
                # 显示图层名和属性，例如第一个字段的值
                display_value = f"{feature.attribute('sc_eci')},{feature.attribute('sc_net')},{feature.attribute('sc_cjf')},{feature.attribute('sc_ventor')},{feature.attribute('sc_band')},{feature.attribute('sc_coverage_type')},{feature.attribute('sc_coverage_region')}"
                # print(f"{layer.name()}: {display_value}")
                item_text = f"{layer.name()}: {display_value}"
                item = QListWidgetItem(item_text)
                item.setData(1024, (layer, feature_id))
                list_widget.addItem(item)
            list_widget.itemDoubleClicked.connect(dlg.accept)
            layout.addWidget(list_widget)
            dlg.setLayout(layout)

            if dlg.exec_():
                selected_item = list_widget.currentItem()
                if selected_item:
                    source_layer, source_fid = selected_item.data(1024)
                    source_feature = source_layer.getFeature(int(source_fid))

                    # 选择要素500米范围内的所有要素
                    source_region = source_feature["sc_coverage_region"]

                    distance = distance_dict[source_region]
                    source_distance_features = select_distance_features(source_layer, source_fid, distance=distance)

                    create_temp_layer(source_layer,source_distance_features, source_fid)
                    # self.canvas.refresh()
            else:

                # 信息提示弹窗
                # QMessageBox.information(iface.mainWindow(), "提示", "没有选中要素，请检查当前激活图层！")
                # 警告弹窗
                # QMessageBox.warning(None, "警告", "文件路径不存在")
                # 错误弹窗
                # QMessageBox.critical(iface.mainWindow(), "错误", "图层加载失败")
                print("提示", "已取消选择要素.")
            
        else:
            QMessageBox.information(iface.mainWindow(), "提示", "没有选中要素，请检查当前激活图层！")
            print("提示", "未找到要素")





# 激活工具
selectTool = MultiSelectMapTool(iface.mapCanvas())
iface.mapCanvas().setMapTool(selectTool)





