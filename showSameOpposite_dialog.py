# -*- coding: utf-8 -*-
"""
/***************************************************************************
 showSameOppositeDialog
                                 A QGIS plugin
 showSameOpposite
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2025-04-17
        git sha              : $Format:%H$
        copyright            : (C) 2025 by showSameOpposite
        email                : showSameOpposite
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import sys,os
debuger_path = os.path.join(os.path.dirname(__file__),'pydevd-pycharm.egg')
print(debuger_path)
sys.path.append(debuger_path)

import pydevd_pycharm



# 导入图层触发器  主要用于添加索引对象 和移除临时图层
from  .layerMonitor import LayerMonitor,spatial_index

import os
import configparser
from qgis.PyQt import uic, QtWidgets
from qgis.core import QgsProject,QgsSpatialIndex,QgsFeatureRequest
from PyQt5.QtWidgets import  QListWidgetItem


CONFIG_FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'showSameOpposite_dialog_config.ui'))

SEARCH_FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'showSameOpposite_dialog_search.ui'))


class searchDialog(QtWidgets.QDialog, SEARCH_FORM_CLASS):
    def __init__(self, parent=None):
        super(showSameOppositeDialog, self).__init__(parent)
        self.setupUi(self)
        self.init_ui_connections()         # 初始化UI组件,连接信号与槽函数
        self.populate_layers()             # 更新图层 下拉框


    def init_ui_connections(self):
        self.pushButton.accepted.connect(self.search_cells)                      # 连接信号与槽函数
        self.comboBox_layer.toggled.connect(self.update_comboBox_search_type_combobox)      # 连接信号与槽函数

    def search_cells(self):
        # 查找小区
        print('search_cells')
        layer = self.get_current_layer()     # 获取当前选中的图层对象
        if not layer:
            print(layer)
            return
        search_type = self.comboBox_search_type.currentText()
        search_text = self.lineEdit.text()
        try:
            # 获取空间索引对象
            select_spatial_index = spatial_index.get(layer.id(), None)
            if select_spatial_index is None:
                spatial_index[layer.id()] = QgsSpatialIndex(layer.getFeatures())  # 添加索引对象
                select_spatial_index = spatial_index[layer.id()]
        except KeyError:
            return []

        # 构建查询
        expression = f'"{search_type}" LIKE \'%{search_text}%\''
        request = QgsFeatureRequest().setFilterExpression(expression)

        # 执行查询
        matching_features = list(layer.getFeatures(request))
        for feature in matching_features:
            sc_eci = feature.get('sc_eci','')
            # sc_cellname = feature.get('sc_cellname','')
            display_value = f"{feature.attribute('sc_eci')},{feature.attribute('sc_net')},{feature.attribute('sc_cjf')},{feature.attribute('sc_ventor')},{feature.attribute('sc_band')},{feature.attribute('sc_coverage_type')},{feature.attribute('sc_coverage_region')}"
            item = QListWidgetItem(display_value)
            item.setData(1024, (layer, feature.id()))
            self.listWidget.addItem(item)
            self.listWidget.itemDoubleClicked.connect(self.accept)




    # results = []
    # request = QgsFeatureRequest().setFilterFids(candidate_ids)
    # results = [f for f in select_layer.getFeatures(request)]




    def get_current_layer(self):
        """获取当前选中的图层对象"""
        layer_name = self.comboBox_layer.currentText()
        if layer_name:
            layer = QgsProject.instance().mapLayersByName(layer_name)[0]
            print('current_layer:', layer)
            return layer
        else:
            return None

    def populate_layers(self):
        """填充图层到下拉框"""
        self.comboBox_layer.clear()
        layers = QgsProject.instance().mapLayers().values()
        self.comboBox_layer.addItems([layer.name() for layer in layers])
        self.comboBox_layer.setCurrentIndex(self.layerComboBox.count()-1)   # 默认选中最后一个图层

    def update_comboBox_search_type_combobox(self):
        self.comboBox_search_type.clear()
        """根据当前图层更新字段下拉框"""
        layer = self.get_current_layer()     # 获取当前选中的图层对象
        if not layer:
            print(layer)
            return
        fields = [field.name() for field in layer.fields() if field.type() == 'str']         # 获取当前图层字段列表

        self.comboBox_search_type.setStyleSheet("background: #66F8DC")
        self.comboBox_search_type.addItems(fields)  # wkt相关控件下拉框添加字段

        # 选中第一个字段
        self.comboBox_search_type.setCurrentIndex(self.getComboBoxItemIndex(self.comboBox_search_type,'sc_eci'))

    def  getComboBoxItemIndex(self, comboBox, itemText):
        # 获取下拉框指定文本的索引
        for i in range(comboBox.count()):
            if comboBox.itemText(i) == itemText:     # 找到指定文本
                return i
        return -1










class showSameOppositeDialog(QtWidgets.QDialog, CONFIG_FORM_CLASS):
    def __init__(self, parent=None):
        super(showSameOppositeDialog, self).__init__(parent)
        self.setupUi(self)

        # 初始化配置存储
        self.config = configparser.ConfigParser()
        self.init_ui_connections()         # 初始化UI组件,连接信号与槽函数

        self.setup_radio_buttons()         # 初始化单选按钮组

        self.populate_layers()             # 更新图层 下拉框


    def init_ui_connections(self):
        """连接信号与槽函数"""
        # 单选按钮切换时更新控件状态
        self.wktRadioButton.toggled.connect(self.update_wkt_controls_state)
        self.lonlatRadioButton.toggled.connect(self.update_lonlat_controls_state)
        # 按钮框信号连接
        self.button_box.accepted.connect(self.save_config)


    def  getComboBoxItemIndex(self, comboBox, itemText):
        """获取下拉框指定文本的索引"""
        for i in range(comboBox.count()):
            if comboBox.itemText(i) == itemText:     # 找到指定文本
                return i
        return -1


    def populate_layers(self):
        """填充图层到下拉框"""
        self.layerComboBox.clear()
        layers = QgsProject.instance().mapLayers().values()
        self.layerComboBox.addItems([layer.name() for layer in layers])
        self.layerComboBox.setCurrentIndex(self.layerComboBox.count()-1)   # 默认选中最后一个图层

    def setup_radio_buttons(self):
        """初始化单选按钮组"""
        self.radio_group = QtWidgets.QButtonGroup(self)
        self.radio_group.addButton(self.wktRadioButton)
        self.radio_group.addButton(self.lonlatRadioButton)
        # self.wktRadioButton.setChecked(True)
        # self.lonlatRadioButton.setChecked(False)

    def get_current_layer(self):
        """获取当前选中的图层对象"""
        layer_name = self.layerComboBox.currentText()
        if layer_name:
            layer = QgsProject.instance().mapLayersByName(layer_name)[0]
            print('current_layer:', layer)
            return layer
        else:
            return None


    def update_wkt_controls_state(self):
        pydevd_pycharm.settrace('localhost', port=53001, stdoutToServer=True, stderrToServer=True)  # 开启调试
        """更新控件可用状态"""
        """根据当前图层更新字段下拉框"""
        layer = self.get_current_layer()     # 获取当前选中的图层对象
        if not layer:
            print(layer)
            return
        fields = [field.name() for field in layer.fields()]         # 获取当前图层字段列表

        # 点击 单选按钮时，更新控件状态
        wkt_editable = True

        # wkt控件可用
        # self.wktRadioButton.setChecked(wkt_editable)                # 单选按钮置为选中状态
        for combo in [self.scWktComboBox,self.tcWktComboBox, self.scAzimuthComboBox, self.tcAzimuthComboBox, self.scRadiusComboBox, self.tcRadiusComboBox,self.coverageRegionComboBox]:
            combo.clear()
            combo.editable = wkt_editable
            combo.setStyleSheet("background: #66F8DC" if wkt_editable else "")
            combo.addItems(fields)  # wkt相关控件下拉框添加字段

        # 选中第一个字段
        self.scWktComboBox.setCurrentIndex(self.getComboBoxItemIndex(self.scWktComboBox,'sc_eci'))
        self.tcWktComboBox.setCurrentIndex(self.getComboBoxItemIndex(self.tcWktComboBox,'tc_cfg_point'))
        self.scAzimuthComboBox.setCurrentIndex(self.getComboBoxItemIndex(self.scAzimuthComboBox,'sc_azimuth'))
        self.tcAzimuthComboBox.setCurrentIndex(self.getComboBoxItemIndex(self.tcAzimuthComboBox,'tc_azimuth'))
        self.scRadiusComboBox.setCurrentIndex(self.getComboBoxItemIndex(self.scRadiusComboBox,'sc_avg_site_distance'))
        self.tcRadiusComboBox.setCurrentIndex(self.getComboBoxItemIndex(self.tcRadiusComboBox,'tc_avg_site_distance'))
        self.coverageRegionComboBox.setCurrentIndex(self.getComboBoxItemIndex(self.coverageRegionComboBox,'sc_coverage_region'))
        # 设置经纬度相关字段不可用
        for combo in [self.scLonComboBox, self.scLatComboBox, self.tcLonComboBox, self.tcLatComboBox]:
            combo.clear()
            combo.editable=(not wkt_editable)
            combo.setStyleSheet("" if wkt_editable else "background: #F0F0F0")

    def update_lonlat_controls_state(self):
        pydevd_pycharm.settrace('localhost', port=53001, stdoutToServer=True, stderrToServer=True)  # 开启调试
        """更新控件可用状态"""
        """根据当前图层更新字段下拉框"""
        layer = self.get_current_layer()     # 获取当前选中的图层对象
        if not layer:
            print(layer)
            return
        fields = [field.name() for field in layer.fields()]         # 获取当前图层字段列表

        # 点击 单选按钮时，更新控件状态
        lonlat_editable = True

        # 经纬度相关控件设置可用
        for combo in [self.scLonComboBox, self.scLatComboBox, self.tcLonComboBox, self.tcLatComboBox, self.scAzimuthComboBox, self.tcAzimuthComboBox, self.scRadiusComboBox, self.tcRadiusComboBox,self.coverageRegionComboBox]:
            combo.clear()
            combo.editable=(lonlat_editable)
            combo.setStyleSheet("background: #66F8DC" if lonlat_editable else "")
            combo.addItems(fields)  # wkt相关控件下拉框添加字段

        # 选中第一个字段
        self.scLonComboBox.setCurrentIndex(self.getComboBoxItemIndex(self.scLonComboBox,'sc_eci'))
        self.scLatComboBox.setCurrentIndex(self.getComboBoxItemIndex(self.scLatComboBox,'tc_eci'))
        self.tcLonComboBox.setCurrentIndex(self.getComboBoxItemIndex(self.tcLonComboBox,'sc_eci'))
        self.tcLatComboBox.setCurrentIndex(self.getComboBoxItemIndex(self.tcLatComboBox,'tc_eci'))
        self.scAzimuthComboBox.setCurrentIndex(self.getComboBoxItemIndex(self.scAzimuthComboBox,'sc_azimuth'))
        self.tcAzimuthComboBox.setCurrentIndex(self.getComboBoxItemIndex(self.tcAzimuthComboBox,'tc_azimuth'))
        self.scRadiusComboBox.setCurrentIndex(self.getComboBoxItemIndex(self.scRadiusComboBox,'sc_avg_site_distance'))
        self.tcRadiusComboBox.setCurrentIndex(self.getComboBoxItemIndex(self.tcRadiusComboBox,'tc_avg_site_distance'))
        self.coverageRegionComboBox.setCurrentIndex(self.getComboBoxItemIndex(self.coverageRegionComboBox,'sc_coverage_region'))

        # wkt控件设置不可用                            # 更新wkt控件字段下拉框
        for combo in [self.scWktComboBox, self.tcWktComboBox]:
            combo.clear()
            combo.editable = not lonlat_editable
            combo.setStyleSheet("" if lonlat_editable else "background: #F0F0F0")




    def save_config(self):
        """保存配置到文件"""
        layer = self.get_current_layer()
        print('layer,id:',layer,layer.id())
        if not layer:
            QtWidgets.QMessageBox.warning(self, "错误", "请先选择有效图层")
            return

        print(1)
        # 读取配置参数
        self.config['DEFAULT'] = {
            'layer_id': layer.id(),
            'mode': 'wkt' if self.wktRadioButton.isChecked() else 'lonlat',
            'sc_wkt_field': self.scWktComboBox.currentText(),
            'tc_wkt_field': self.tcWktComboBox.currentText(),
            'sc_azimuth': self.scAzimuthComboBox.currentText(),
            'tc_azimuth': self.tcAzimuthComboBox.currentText(),
            'sc_radius': self.scRadiusComboBox.currentText(),
            'tc_radius': self.tcRadiusComboBox.currentText(),
            'sc_coverage_region': self.coverageRegionComboBox.currentText(),

            'sc_lon_field': self.scLonComboBox.currentText(),
            'sc_lat_field': self.scLatComboBox.currentText(),

            'tc_lon_field': self.tcLonComboBox.currentText(),
            'tc_lat_field': self.tcLatComboBox.currentText(),
        }

        # 写入配置文件
        config_path = os.path.join(os.path.dirname(__file__), 'config.ini')
        with open(config_path, 'w') as configfile:
            self.config.write(configfile)

        self.accept()
